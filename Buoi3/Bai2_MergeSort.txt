#include <iostream>
#include <stdio.h>
#include <chrono>
#define SIZE 100
using namespace std;
using namespace std::chrono;
/*Bài 2: Phát sinh ngẫu nhiên mảng 1 chiều có N phần tử, mỗi phần tử có kiểu dữ liệu là 1 số
nguyên. Sắp xếp và đo thời gian sắp xếp của các thuật toán ở bài 1*/

void merge(int arr[], int l, const int m, const int r)
{
	int i, j, k;
	int n1 = m - l + 1;
	int n2 = r - m;
	/* Tạo các mảng tạm */
	int* L = new int[n1];
	int* R = new int[n2];
	/* Copy dữ liệu sang các mảng tạm */
	for (i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (j = 0; j < n2; j++)
		R[j] = arr[m + 1 + j];
	/* Gộp hai mảng tạm vừa rồi vào mảng arr*/
	i = 0; // Khởi tạo chỉ số bắt đầu của mảng con đầu tiên
	j = 0; // Khởi tạo chỉ số bắt đầu của mảng con thứ hai
	k = l; // IKhởi tạo chỉ số bắt đầu của mảng lưu kết quả
	while (i < n1 && j < n2)
	{
		if (L[i] <= R[j])
		{
			arr[k] = L[i];
			i++;
		}
		else
		{
			arr[k] = R[j];
			j++;
		}
		k++;
	}

	/* Copy các phần tử còn lại của mảng L vào arr nếu có */
	while (i < n1)
	{
		arr[k] = L[i];
		i++;
		k++;
	}

	/* Copy các phần tử còn lại của mảng R vào arr nếu có */
	while (j < n2)
	{
		arr[k] = R[j];
		j++;
		k++;
	}
	delete[] L;
	delete[] R;
}

/* l là chỉ số trái và r là chỉ số phải của mảng cần được sắp xếp */
void mergeSort(int arr[], int l, int r)
{
	if (l < r)
	{
		// Tương tự (l+r)/2, nhưng cách này tránh tràn số khi l và r lớn
		int m = l + (r - l) / 2;

		// Gọi hàm đệ quy tiếp tục chia đôi từng nửa mảng
		mergeSort(arr, l, m);
		mergeSort(arr, m + 1, r);

		merge(arr, l, m, r);
	}
}


void output(int A[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", A[i]);
	printf("\n");
}

void inputN(int &n)
{
	printf("Nhap n: ");
	scanf("%d", &n);
}

// ham khoi tao cac gt trong mang A
void initA(int A[], int n)
{
	for (int i = 0; i < n; i++)
		A[i] = rand() % 100 + 1;
}

int main()
{
	int arr[SIZE],  n;
	inputN(n);
	initA(arr, n);
	output(arr, n);
	auto start = high_resolution_clock::now();
	mergeSort(arr, 0, n - 1);
	auto end = high_resolution_clock::now();
	auto time = duration_cast<nanoseconds>(end - start);
	printf("\nSorted array is \n");
	output(arr, n);
	cout << "\nIt takes " << time.count() << " nanoseconds" << endl;
	system("pause");
	return 0;
}